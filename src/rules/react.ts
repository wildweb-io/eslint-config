import type {Linter} from 'eslint';

export const reactRules = {
	'react/boolean-prop-naming': [
		'warn',
		{validateNested: true, rule: '^(is|has)[A-Z]([A-Za-z0-9]?)+'},
	],
	'react/button-has-type': [
		'error',
		{button: true, submit: true, reset: false},
	],
	'react/default-props-match-prop-types': [
		'error',
		{allowRequiredDefaults: false},
	],
	'react/destructuring-assignment': ['off', 'always'],
	'react/display-name': ['error', {ignoreTranspilerName: false}],
	'react-hooks/exhaustive-deps': ['error'],
	'react/forbid-component-props': ['off', {forbid: []}],
	'react/forbid-dom-props': ['off', {forbid: []}],
	'react/forbid-elements': ['off', {forbid: []}],
	'react/forbid-foreign-prop-types': ['error', {allowInPropTypes: true}],
	'react/forbid-prop-types': ['error', {forbid: ['array']}],
	'react/function-component-definition': [
		'error',
		{
			namedComponents: 'arrow-function',
			unnamedComponents: 'arrow-function',
		},
	],
	'react/hook-use-state': ['error'],
	'react/iframe-missing-sandbox': ['error'],
	'react/jsx-boolean-value': ['error', 'never', {always: []}],
	'react/jsx-child-element-spacing': ['off'],
	'react/jsx-closing-bracket-location': [
		'off',
		{nonEmpty: 'tag-aligned', selfClosing: false},
	],
	'react/jsx-closing-tag-location': ['off'],
	'react/jsx-curly-brace-presence': [
		'error',
		{props: 'never', children: 'ignore', propElementValues: 'always'},
	],
	'react/jsx-curly-newline': [
		'off',
		{multiline: 'consistent', singleline: 'forbid'},
	],
	'react/jsx-curly-spacing': ['error', 'never'],
	'react/jsx-equals-spacing': ['error', 'never'],
	'react/jsx-filename-extension': ['warn', {extensions: ['.tsx']}],
	'react/jsx-first-prop-new-line': ['off', 'multiline'],
	'react/jsx-fragments': ['error', 'syntax'],
	'react/jsx-handler-names': [
		'error',
		{eventHandlerPrefix: 'handle', eventHandlerPropPrefix: 'on'},
	],
	'react/jsx-indent': ['off', 'tab'],
	'react/jsx-indent-props': ['off', 'tab'],
	'react/jsx-key': [
		'error',
		{
			checkFragmentShorthand: true,
			checkKeyMustBeforeSpread: true,
			warnOnDuplicates: true,
		},
	],
	'react/jsx-max-depth': ['off'],
	'react/jsx-max-props-per-line': ['off', {maximum: 3, when: 'multiline'}],
	'react/jsx-newline': ['off'],
	'react/jsx-no-bind': [
		'error',
		{
			allowArrowFunctions: true,
			allowBind: false,
			allowFunctions: false,
			ignoreRefs: false,
			ignoreDOMComponents: false,
		},
	],
	'react/jsx-no-comment-textnodes': ['error'],
	'react/jsx-no-constructed-context-values': ['error'],
	'react/jsx-no-duplicate-props': ['error', {ignoreCase: false}],
	'react/jsx-no-leaked-render': 'error',
	'react/jsx-no-literals': ['off', {noStrings: true}],
	'react/jsx-no-script-url': ['error', [{name: 'Link', props: ['to']}]],
	'react/jsx-no-target-blank': [
		'error',
		{warnOnSpreadAttributes: true, forms: true, links: true},
	],
	'react/jsx-no-undef': ['error'],
	'react/jsx-no-useless-fragment': ['error'],
	'react/jsx-one-expression-per-line': ['off', {allow: 'single-child'}],
	'react/jsx-pascal-case': ['error', {allowAllCaps: true, ignore: []}],
	'react/jsx-props-no-multi-spaces': ['error'],
	'react/jsx-props-no-spreading': [
		'off',
		{
			html: 'enforce',
			custom: 'enforce',
			explicitSpread: 'ignore',
			exceptions: [],
		},
	],
	'jsx-quotes': ['error', 'prefer-single'],
	'react/jsx-sort-props': [
		'error',
		{
			callbacksLast: true,
			shorthandFirst: true,
			noSortAlphabetically: true,
			reservedFirst: true,
			multiline: 'ignore',
			locale: 'auto',
		},
	],
	'react/jsx-tag-spacing': [
		'error',
		{
			closingSlash: 'never',
			beforeSelfClosing: 'always',
			afterOpening: 'never',
			beforeClosing: 'never',
		},
	],
	'react/jsx-uses-react': ['off'],
	'react/jsx-uses-vars': ['error'],
	'react/jsx-wrap-multilines': [
		'error',
		{
			declaration: 'parens-new-line',
			assignment: 'parens-new-line',
			return: 'parens-new-line',
			arrow: 'parens-new-line',
			condition: 'ignore',
			logical: 'ignore',
			prop: 'ignore',
		},
	],
	'react/no-access-state-in-setstate': ['error'],
	'react/no-adjacent-inline-elements': ['off'],
	'react/no-array-index-key': ['error'],
	'react/no-arrow-function-lifecycle': ['error'],
	'react/no-children-prop': ['error'],
	'react/no-danger': ['error'],
	'react/no-danger-with-children': ['error'],
	'react/no-deprecated': ['error'],
	'react/no-did-mount-set-state': ['off'],
	'react/no-did-update-set-state': ['error'],
	'react/no-direct-mutation-state': ['error'],
	'react/no-find-dom-node': ['error'],
	'react/no-invalid-html-attribute': ['error'],
	'react/no-is-mounted': ['error'],
	'react/no-multi-comp': ['off'],
	'react/no-namespace': ['error'],
	'react/no-object-type-as-default-prop': 'error',
	'react/no-redundant-should-component-update': ['error'],
	'react/no-render-return-value': ['error'],
	'react/no-set-state': ['off'],
	'react/no-string-refs': ['error', {noTemplateLiterals: true}],
	'react/no-this-in-sfc': ['error'],
	'react/no-typos': ['error'],
	'react/no-unescaped-entities': ['error'],
	'react/no-unknown-property': ['error'],
	'react/no-unsafe': ['error', {checkAliases: true}],
	'react/no-unstable-nested-components': ['error'],
	'react/no-unused-class-component-methods': ['error'],
	'react/no-unused-prop-types': [
		'error',
		{customValidators: [], skipShapeProps: true},
	],
	'react/no-unused-state': ['error'],
	'react/no-will-update-set-state': ['error'],
	'react/prefer-es6-class': ['error', 'always'],
	'react/prefer-exact-props': ['error'],
	'react/prefer-read-only-props': ['error'],
	'react/prefer-stateless-function': ['error', {ignorePureComponents: true}],
	'react/prop-types': [
		'error',
		{ignore: [], customValidators: [], skipUndeclared: false},
	],
	'react/react-in-jsx-scope': ['off'],
	'react/require-default-props': [
		'off',
		{
			forbidDefaultForRequired: true,
			ignoreFunctionalComponents: true,
		},
	],
	'react/require-optimization': ['off', {allowDecorators: []}],
	'react/require-render-return': ['error'],
	'react-hooks/rules-of-hooks': ['error'],
	'react/self-closing-comp': ['error', {component: true, html: true}],
	'react/sort-comp': [
		'off',
		{
			order: [
				'static-variables',
				'static-methods',
				'instance-variables',
				'lifecycle',
				'/^handle.+$/',
				'/^on.+$/',
				'getters',
				'setters',
				'/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',
				'instance-methods',
				'everything-else',
				'rendering',
			],
			groups: {
				lifecycle: [
					'displayName',
					'propTypes',
					'contextTypes',
					'childContextTypes',
					'mixins',
					'statics',
					'defaultProps',
					'constructor',
					'getDefaultProps',
					'getInitialState',
					'state',
					'getChildContext',
					'getDerivedStateFromProps',
					'componentWillMount',
					'UNSAFE_componentWillMount',
					'componentDidMount',
					'componentWillReceiveProps',
					'UNSAFE_componentWillReceiveProps',
					'shouldComponentUpdate',
					'componentWillUpdate',
					'UNSAFE_componentWillUpdate',
					'getSnapshotBeforeUpdate',
					'componentDidUpdate',
					'componentDidCatch',
					'componentWillUnmount',
				],
				rendering: ['/^render.+$/', 'render'],
			},
		},
	],
	'react/sort-default-props': 'error',
	'react/sort-prop-types': [
		'off',
		{
			ignoreCase: true,
			callbacksLast: false,
			requiredFirst: false,
			sortShapeProp: true,
		},
	],
	'react/state-in-constructor': ['error', 'never'],
	'react/static-property-placement': ['error', 'property assignment'],
	'react/style-prop-object': ['error', {allow: ['FormattedNumber']}],
	'react/void-dom-elements-no-children': ['error'],
} satisfies Linter.FlatConfig['rules'];
